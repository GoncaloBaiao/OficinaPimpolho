// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OficinaPimpolho.Data;

#nullable disable

namespace OficinaPimpolho.Migrations
{
    [DbContext(typeof(OficinaPimpolhoContext))]
    [Migration("20230708111925_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Cliente", b =>
                {
                    b.Property<int>("IdClientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientes"), 1L, 1);

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Apelido");

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DataNasc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MarcacaoIdMarcacao")
                        .HasColumnType("int");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Ntelemovel")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PrimeiroNome");

                    b.HasKey("IdClientes");

                    b.HasIndex("MarcacaoIdMarcacao");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Gestor", b =>
                {
                    b.Property<int>("IdGestor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGestor"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome");

                    b.Property<string>("Ntelemovel")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("OficinaId")
                        .HasColumnType("int");

                    b.HasKey("IdGestor");

                    b.ToTable("Gestor");

                    b.HasData(
                        new
                        {
                            IdGestor = 1,
                            Email = "celeste@gmail.com",
                            Nome = "Guita Pimpolho",
                            Ntelemovel = "911111111",
                            OficinaId = 1
                        },
                        new
                        {
                            IdGestor = 2,
                            Email = "sarabatista@gmail.com",
                            Nome = "Carlos Ribeiro",
                            Ntelemovel = "911111112",
                            OficinaId = 2
                        },
                        new
                        {
                            IdGestor = 3,
                            Email = "tinoni@gmail.com",
                            Nome = "Joaquim Alberto",
                            Ntelemovel = "911111113",
                            OficinaId = 3
                        });
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Marcacao", b =>
                {
                    b.Property<int>("IdMarcacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMarcacao"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome");

                    b.Property<double>("Preco")
                        .HasColumnType("float");

                    b.HasKey("IdMarcacao");

                    b.ToTable("Marcacao");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.MarcacaoServico", b =>
                {
                    b.Property<int>("MarcacaoId")
                        .HasColumnType("int");

                    b.Property<int>("ServicoId")
                        .HasColumnType("int");

                    b.HasKey("MarcacaoId", "ServicoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("MarcacaoServico");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Oficina", b =>
                {
                    b.Property<int>("IdOficina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOficina"), 1L, 1);

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Localidade")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NumTelemovel")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("IdOficina");

                    b.ToTable("Oficina");

                    b.HasData(
                        new
                        {
                            IdOficina = 1,
                            CodigoPostal = "1955-276",
                            Localidade = "Pinhal Novo",
                            Nome = "JaquimOficina",
                            NumTelemovel = "911111111"
                        },
                        new
                        {
                            IdOficina = 2,
                            CodigoPostal = "9754-476",
                            Localidade = "Castelo de paiva",
                            Nome = "PimpolhoOficina",
                            NumTelemovel = "911111112"
                        },
                        new
                        {
                            IdOficina = 3,
                            CodigoPostal = "7985-815",
                            Localidade = "Marco de Canaveses",
                            Nome = "DJ8Oficina",
                            NumTelemovel = "911111113"
                        });
                });

            modelBuilder.Entity("OficinaPimpolho.Models.OficinaServico", b =>
                {
                    b.Property<int>("OficinaId")
                        .HasColumnType("int");

                    b.Property<int>("ServicoId")
                        .HasColumnType("int");

                    b.HasKey("OficinaId", "ServicoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("OficinaServico");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Servico", b =>
                {
                    b.Property<int>("IdServico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServico"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome");

                    b.Property<double>("Preco")
                        .HasColumnType("float");

                    b.HasKey("IdServico");

                    b.ToTable("Servico");

                    b.HasData(
                        new
                        {
                            IdServico = 1,
                            Nome = "Ar Condicionado",
                            Preco = 100.0
                        },
                        new
                        {
                            IdServico = 2,
                            Nome = "Estofos",
                            Preco = 170.0
                        },
                        new
                        {
                            IdServico = 3,
                            Nome = "Vidros",
                            Preco = 70.0
                        },
                        new
                        {
                            IdServico = 4,
                            Nome = "Mecânica",
                            Preco = 200.0
                        },
                        new
                        {
                            IdServico = 5,
                            Nome = "Pneus",
                            Preco = 50.0
                        },
                        new
                        {
                            IdServico = 6,
                            Nome = "Inspeção Periódica",
                            Preco = 50.0
                        },
                        new
                        {
                            IdServico = 7,
                            Nome = "Bate-chapas",
                            Preco = 70.0
                        },
                        new
                        {
                            IdServico = 8,
                            Nome = "Cortesia/Mobilidade",
                            Preco = 100.0
                        },
                        new
                        {
                            IdServico = 9,
                            Nome = "Eletricidade/Eletrónica",
                            Preco = 150.0
                        },
                        new
                        {
                            IdServico = 10,
                            Nome = "Lavagem",
                            Preco = 10.0
                        },
                        new
                        {
                            IdServico = 11,
                            Nome = "Pintura",
                            Preco = 90.0
                        },
                        new
                        {
                            IdServico = 12,
                            Nome = "Tuning",
                            Preco = 700.0
                        },
                        new
                        {
                            IdServico = 13,
                            Nome = "Assistência em Viagem",
                            Preco = 250.0
                        },
                        new
                        {
                            IdServico = 14,
                            Nome = "GPL Auto",
                            Preco = 40.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Cliente", b =>
                {
                    b.HasOne("OficinaPimpolho.Models.Marcacao", "Marcacao")
                        .WithMany()
                        .HasForeignKey("MarcacaoIdMarcacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marcacao");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.MarcacaoServico", b =>
                {
                    b.HasOne("OficinaPimpolho.Models.Marcacao", "Marcacao")
                        .WithMany("MarcacaoServico")
                        .HasForeignKey("MarcacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OficinaPimpolho.Models.Servico", "Servico")
                        .WithMany("MarcacaoServico")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marcacao");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.OficinaServico", b =>
                {
                    b.HasOne("OficinaPimpolho.Models.Oficina", "Oficina")
                        .WithMany("OficinaServico")
                        .HasForeignKey("OficinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OficinaPimpolho.Models.Servico", "Servico")
                        .WithMany("OficinaServico")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oficina");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Marcacao", b =>
                {
                    b.Navigation("MarcacaoServico");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Oficina", b =>
                {
                    b.Navigation("OficinaServico");
                });

            modelBuilder.Entity("OficinaPimpolho.Models.Servico", b =>
                {
                    b.Navigation("MarcacaoServico");

                    b.Navigation("OficinaServico");
                });
#pragma warning restore 612, 618
        }
    }
}
